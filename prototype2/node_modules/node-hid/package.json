{
  "_args": [
    [
      "https://github.com/lorenc-tomasz/node-hid.git#package",
      "C:\\Users\\Mathias\\Desktop\\prototype2"
    ]
  ],
  "_from": "git+https://github.com/lorenc-tomasz/node-hid.git#package",
  "_id": "node-hid@0.4.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/node-hid",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/lorenc-tomasz/node-hid/package/package.json",
      "gitUrl": "git://github.com/lorenc-tomasz/node-hid.git#package",
      "httpsUrl": "git+https://github.com/lorenc-tomasz/node-hid.git#package",
      "shortcut": "github:lorenc-tomasz/node-hid#package",
      "ssh": "git@github.com:lorenc-tomasz/node-hid.git#package",
      "sshUrl": "git+ssh://git@github.com/lorenc-tomasz/node-hid.git#package",
      "type": "github"
    },
    "name": null,
    "raw": "https://github.com/lorenc-tomasz/node-hid.git#package",
    "rawSpec": "https://github.com/lorenc-tomasz/node-hid.git#package",
    "scope": null,
    "spec": "git+https://github.com/lorenc-tomasz/node-hid.git#package",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/lorenc-tomasz/node-hid.git#3e013139a4df8080de1933bba779471cdea55030",
  "_shasum": "c61773c38c3f0cbaad74cead9cd35174f15f941f",
  "_shrinkwrap": null,
  "_spec": "https://github.com/lorenc-tomasz/node-hid.git#package",
  "_where": "C:\\Users\\Mathias\\Desktop\\prototype2",
  "author": {
    "email": "hans.huebner@gmail.com",
    "name": "Hans HÃ¼bner",
    "url": "https://github.com/hanshuebner"
  },
  "bugs": {
    "url": "https://github.com/hanshuebner/node-hid/issues"
  },
  "contributors": [
    {
      "name": "Blake Miner",
      "email": "miner.blake@gmail.com"
    }
  ],
  "dependencies": {
    "nan": "^2.0.9"
  },
  "description": "USB HID device access library",
  "devDependencies": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "3e013139a4df8080de1933bba779471cdea55030",
  "gypfile": true,
  "homepage": "https://github.com/hanshuebner/node-hid#readme",
  "license": "MIT/X11",
  "main": "./index.js",
  "name": "node-hid",
  "optionalDependencies": {},
  "readme": "# node-hid - Access USB HID devices from node.js #\r\n\r\n## Installation\r\n\r\n### Prerequisites:\r\n\r\n* Mac OS (I use 10.6.8) or Linux (kernel 2.6+) or Windows XP+\r\n* node.js v0.8\r\n* libudev-dev (Linux only)\r\n* libusb-1.0-0-dev (Ubuntu versions missing `libusb.h` only)\r\n* git\r\n\r\n### Compile from source on Linux or OSX\r\n\r\nTo develop locally you'll need the following commands:\r\n\r\n```\r\ngit submodule update --init   # done automatically on publish, but you'll need it locally\r\nnpm install       # rebuilds the module\r\n```\r\n\r\n### Compile from source on Windows\r\n\r\nUse node-gyp to compile the extension.\r\n\r\nPlease note that Windows support is incomplete and needs some work\r\nto pull it to the same level as on Linux and OSX.  See issues #10\r\nand #15 in github for discussion.  Pull requests to improve Windows\r\nsupport would be welcome.\r\n\r\n## Test it\r\n\r\nIn the ```src/``` directory, various JavaScript programs can be found\r\nthat talk to specific devices in some way.  The ```show-devices.js```\r\nprogram can be used to display all HID devices in the system.\r\n\r\n## How to Use\r\n\r\n### Load the extension\r\n\r\n```\r\nvar HID = require('node-hid');\r\n```\r\n\r\n### Get a list of all HID devices in the system:\r\n\r\n```\r\nvar devices = HID.devices()\r\n```\r\n\r\ndevices will contain an array of objects, one for each HID device\r\navailable.  Of particular interest are the ```vendorId``` and\r\n```productId```, as they uniquely identify a device, and the\r\n```path```, which is needed to open a particular device.\r\n\r\nHere is some sample output:\r\n```\r\nHID.devices();\r\n[ { vendorId: 1452,\r\n    productId: 595,\r\n    path: 'USB_05ac_0253_0x100a148e0',\r\n    serialNumber: '',\r\n    manufacturer: 'Apple Inc.',\r\n    product: 'Apple Internal Keyboard / Trackpad',\r\n    release: 280,\r\n    interface: -1 },\r\n  { vendorId: 1452,\r\n    productId: 595,\r\n    path: 'USB_05ac_0253_0x100a14e20',\r\n    serialNumber: '',\r\n    manufacturer: 'Apple Inc.',\r\n    product: 'Apple Internal Keyboard / Trackpad',\r\n    release: 280,\r\n    interface: -1 },\r\n<and more>\r\n```\r\n\r\n### Opening a device\r\n\r\nBefore a device can be read from or written to, it must be opened:\r\n\r\n```\r\nvar device = new HID.HID(path);\r\n```\r\n\r\n```device``` will contain a handle to the device.  The ```path``` can\r\nbe determined by a prior HID.devices() call.  If an error occurs\r\nopening the device, an exception will be thrown.\r\n\r\n### Reading from a device\r\n\r\nReading from a device is performed by registering a \"data\" event\r\nhandler:\r\n\r\n```\r\ndevice.on(\"data\", function(data) {});\r\n```\r\n\r\nYou can also listen for errors like this:\r\n\r\n```\r\ndevice.on(\"error\", function(err) {});\r\n```\r\n\r\nAll reading is asynchronous.\r\n\r\n### Writing to a device\r\n\r\nWriting to a device is performed using the write call in a device\r\nhandle.  All writing is synchronous.\r\n\r\n```\r\ndevice.write([0x00, 0x01, 0x01, 0x05, 0xff, 0xff]);\r\n```\r\n\r\n### Support\r\n\r\nI can only provide limited support, in particular for operating\r\nsystems and devices that I don't know.  Please use the\r\n[node-hid Google Group](https://groups.google.com/d/forum/node-hid) \r\nfor general support inquiries (node-hid@googlegroups.com).\r\n\r\n## Complete API\r\n\r\n```\r\nvar device = new HID.HID(path);\r\n```\r\n\r\n### Event: \"data\"\r\n\r\n- `chunk` - Buffer - the data read from the device\r\n\r\n### Event: \"error\"\r\n\r\n- `error` - The error Object emitted\r\n\r\n### device.write(data)\r\n\r\n- `data` - the data to be synchronously written to the device\r\n\r\n### device.close()\r\n\r\nCloses the device. Subsequent reads will raise an error.\r\n\r\n### device.pause()\r\n\r\nPauses reading and the emission of `data` events.\r\n\r\n### device.resume()\r\n\r\nThis method will cause the HID device to resume emmitting `data` events.\r\nIf no listeners are registered for the `data` event, data will be lost.\r\n\r\nWhen a `data` event is registered for this HID device, this method will\r\nbe automatically called.\r\n\r\n### device.read(callback)\r\n\r\nLow-level function call to initiate an asynchronous read from the device.\r\n`callback` is of the form `callback(err, data)`\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hanshuebner/node-hid.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "prepublish": "git submodule update --init"
  },
  "version": "0.4.0"
}
